// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FPTPeopleJobClient is the client API for FPTPeopleJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FPTPeopleJobClient interface {
	AssignPeopleJob(ctx context.Context, in *AssignPeopleJobRequest, opts ...grpc.CallOption) (*PeopleJob, error)
	ListPeopleJob(ctx context.Context, in *ListPeopleJobRequest, opts ...grpc.CallOption) (*ListPeopleJobResponse, error)
}

type fPTPeopleJobClient struct {
	cc grpc.ClientConnInterface
}

func NewFPTPeopleJobClient(cc grpc.ClientConnInterface) FPTPeopleJobClient {
	return &fPTPeopleJobClient{cc}
}

func (c *fPTPeopleJobClient) AssignPeopleJob(ctx context.Context, in *AssignPeopleJobRequest, opts ...grpc.CallOption) (*PeopleJob, error) {
	out := new(PeopleJob)
	err := c.cc.Invoke(ctx, "/training.FPTPeopleJob/AssignPeopleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTPeopleJobClient) ListPeopleJob(ctx context.Context, in *ListPeopleJobRequest, opts ...grpc.CallOption) (*ListPeopleJobResponse, error) {
	out := new(ListPeopleJobResponse)
	err := c.cc.Invoke(ctx, "/training.FPTPeopleJob/ListPeopleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FPTPeopleJobServer is the server API for FPTPeopleJob service.
// All implementations must embed UnimplementedFPTPeopleJobServer
// for forward compatibility
type FPTPeopleJobServer interface {
	AssignPeopleJob(context.Context, *AssignPeopleJobRequest) (*PeopleJob, error)
	ListPeopleJob(context.Context, *ListPeopleJobRequest) (*ListPeopleJobResponse, error)
	mustEmbedUnimplementedFPTPeopleJobServer()
}

// UnimplementedFPTPeopleJobServer must be embedded to have forward compatible implementations.
type UnimplementedFPTPeopleJobServer struct {
}

func (UnimplementedFPTPeopleJobServer) AssignPeopleJob(context.Context, *AssignPeopleJobRequest) (*PeopleJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPeopleJob not implemented")
}
func (UnimplementedFPTPeopleJobServer) ListPeopleJob(context.Context, *ListPeopleJobRequest) (*ListPeopleJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeopleJob not implemented")
}
func (UnimplementedFPTPeopleJobServer) mustEmbedUnimplementedFPTPeopleJobServer() {}

// UnsafeFPTPeopleJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FPTPeopleJobServer will
// result in compilation errors.
type UnsafeFPTPeopleJobServer interface {
	mustEmbedUnimplementedFPTPeopleJobServer()
}

func RegisterFPTPeopleJobServer(s grpc.ServiceRegistrar, srv FPTPeopleJobServer) {
	s.RegisterService(&FPTPeopleJob_ServiceDesc, srv)
}

func _FPTPeopleJob_AssignPeopleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPeopleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTPeopleJobServer).AssignPeopleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTPeopleJob/AssignPeopleJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTPeopleJobServer).AssignPeopleJob(ctx, req.(*AssignPeopleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTPeopleJob_ListPeopleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeopleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTPeopleJobServer).ListPeopleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTPeopleJob/ListPeopleJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTPeopleJobServer).ListPeopleJob(ctx, req.(*ListPeopleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FPTPeopleJob_ServiceDesc is the grpc.ServiceDesc for FPTPeopleJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FPTPeopleJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.FPTPeopleJob",
	HandlerType: (*FPTPeopleJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignPeopleJob",
			Handler:    _FPTPeopleJob_AssignPeopleJob_Handler,
		},
		{
			MethodName: "ListPeopleJob",
			Handler:    _FPTPeopleJob_ListPeopleJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "people_job.proto",
}
